variables:
    CI_IMAGE: aistorage/gitlab-ci:latest
    RUNNER_TAG: ais-etl-ci
    RUNNER_TAG_K8S: ais-etl-ci-k8s
    RUNNER_TAG_STRESS: ais-etl-ci-stress

image: $CI_IMAGE

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == "web"'

stages:
    - lint
    - build
    - test
    - publish
    - stress

# Common setup for all build stages
.build_template:
    when: manual
    stage: build
    tags: 
        - $RUNNER_TAG
    variables:
        GIT_TEST: "true"
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - echo "$DOCKERHUB_TOKEN" | podman login docker.io --username "$DOCKERHUB_USERNAME" --password-stdin

# Common setup for all publish stages
.publish_template:
    when: on_success
    stage: publish
    tags: 
        - $RUNNER_TAG
    variables:
        GIT_TEST: "false"
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - echo "$DOCKERHUB_TOKEN" | podman login docker.io --username "$DOCKERHUB_USERNAME" --password-stdin
    rules:
        - if: '$CI_COMMIT_BRANCH == "main"'
          when: on_success
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
          when: on_success
        - when: never

# Common setup for all test stages
.test_template:
    when: on_success
    stage: test
    tags: 
        - $RUNNER_TAG_K8S
    variables:
        AIS_ENDPOINT: "http://192.168.49.2:8080"
        GIT_TEST: "true"
    before_script:
        - cd transformers && make common_deps && cd ..
    artifacts:
        when: always
        paths:
        - transformers/tests/logs/
        expire_in: 1 week

.stress_template:
    when: manual
    stage: stress
    tags: 
        - $RUNNER_TAG_STRESS
    timeout: 1h
    variables:
        AIS_ENDPOINT: $SJC4_DEV_CLUSTER
        GIT_TEST: "true"
        DEPLOY_ENV: "prod"
    before_script:
        - cd transformers && make common_deps && cd ..
    after_script:
        - echo "Test Results"
        - cat transformers/tests/metrics.txt
    artifacts:
        when: always
        paths:
        - transformers/tests/metrics.txt
        - transformers/tests/logs/
        expire_in: 1 month

lint:
    stage: lint
    tags:
        - $RUNNER_TAG
    timeout: 10m
    rules:
        - changes: &transformers_changes
            - transformers/**/*
          if: '$CI_COMMIT_BRANCH == "main"'
          when: manual
          allow_failure: true
        - changes: *transformers_changes
          if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
          when: on_success
        - when: never
    script:
        - make fmt-check

build:echo:
    extends: .build_template
    script:
        - cd transformers
        - make -C echo all
        - make -C go_echo all
    rules:
      - changes:
          - transformers/echo/**/*
          - transformers/go_echo/**/*
          - transformers/tests/test_echo.py
        when: always
      - when: manual

build:hello_world:
    extends: .build_template
    script:
        - cd transformers
        - make -C hello_world all
        - make -C go_hello_world all
    rules:
      - changes:
          - transformers/hello_world/**/*
          - transformers/go_hello_world/**/*
          - transformers/tests/test_hello_world.py
        when: always
      - when: manual

build:md5:
    extends: .build_template
    script:
        - cd transformers
        - make -C md5 all
    rules:
      - changes:
          - transformers/md5/**/*
          - transformers/tests/test_md5.py
        when: always
      - when: manual

build:hash_with_args:
    extends: .build_template
    script:
        - cd transformers
        - make -C hash_with_args all
    rules:
      - changes:
          - transformers/hash_with_args/**/*
          - transformers/tests/test_hash_with_args.py
        when: always
      - when: manual

build:tar2tf:
    extends: .build_template
    script:
        - cd transformers
        - make -C tar2tf all
    rules:
      - changes:
          - transformers/tar2tf/**/*
          - transformers/tests/test_tar2tf.py
        when: always
      - when: manual

build:compress:
    extends: .build_template
    script:
        - cd transformers
        - make -C compress all
    rules:
      - changes:
          - transformers/compress/**/*
          - transformers/tests/test_compress.py
        when: always
      - when: manual

build:torchvision:
    extends: .build_template
    script:
        - cd transformers
        - make -C torchvision_preprocess all
    rules:
      - changes:
          - transformers/torchvision_preprocess/**/*
          - transformers/tests/test_torchvision_transformer.py
        when: always
      - when: manual

build:keras:
    extends: .build_template
    script:
        - cd transformers
        - make -C keras_preprocess all
    rules:
      - changes:
          - transformers/keras_preprocess/**/*
          - transformers/tests/test_keras_transformer.py
        when: always
      - when: manual

build:face_detection:
    extends: .build_template
    script:
        - cd transformers/face_detection 
        - echo ${KAGGLE_CREDS_JSON} > kaggle_creds.json
        - make all
    rules:
      - changes:
          - transformers/face_detection/**/*
          - transformers/tests/test_face_detection.py
        when: always
      - when: manual

build:audio_split_consolidate:
    extends: .build_template
    script:
        - cd transformers/NeMo/audio_split_consolidate/
        - make -C audio_manager all
        - make -C audio_splitter all
    rules:
      - changes:
          - transformers/NeMo/audio_split_consolidate/**/*
          - transformers/tests/test_audio_split_consolidate.py
          - transformers/tests/test_audio_split.py
        when: always
      - when: manual

build:ffmpeg:
    extends: .build_template
    script:
        - cd transformers
        - make -C FFmpeg all
        - make -C go_FFmpeg all
    rules:
      - changes:
          - transformers/FFmpeg/**/*
          - transformers/go_FFmpeg/**/*
          - transformers/tests/test_ffmpeg.py
        when: always
      - when: manual 

build:batch_rename:
    extends: .build_template
    script:
        - cd transformers/batch_rename
        - make all
    rules:
      - changes:
          - transformers/batch_rename/**/*
          - transformers/tests/test_batch_rename.py
        when: always
      - when: manual 

build:runtime-python:
    extends: .build_template
    script:
        - cd runtime/python
        - make all
    rules:
      - changes:
          - runtime/python/**/*
        when: always
      - when: manual 
    variables:
        RUNTIME_IMAGE: 'aistorage/runtime_python'
        REGISTRY_URL: 'docker.io/aistorage'

test:echo:
    extends: .test_template
    needs: ["build:echo"]
    script:
        - cd transformers/tests && pytest -o log_cli=true --log-cli-level=INFO -v test_echo.py
        - cd ../go_echo/src && go test -v

test:hello_world:
    extends: .test_template
    needs: ["build:hello_world"]
    script:
        - cd transformers/tests && pytest -o log_cli=true --log-cli-level=INFO test_hello_world.py

test:md5:
    extends: .test_template
    needs: ["build:md5"]
    script:
        - cd transformers/tests && pytest -o log_cli=true --log-cli-level=INFO -v test_md5.py

test:hash_with_args:
    extends: .test_template
    needs: ["build:hash_with_args"]
    script:
        - cd transformers/tests && pytest -o log_cli=true --log-cli-level=INFO -v test_hash_with_args.py

test:tar2tf:
    extends: .test_template
    needs: ["build:tar2tf"]
    script:
        - cd transformers/tests && pytest -o log_cli=true --log-cli-level=INFO -v test_tar2tf.py

test:compress:
    extends: .test_template
    needs: ["build:compress"]
    script:
        - cd transformers/tests && pytest -o log_cli=true --log-cli-level=INFO -v test_compress.py

test:torchvision:
    extends: .test_template
    needs: ["build:torchvision"]
    script:
        - pip install torchvision==0.21.0
        - cd transformers/tests && pytest -o log_cli=true --log-cli-level=INFO -v test_torchvision_transformer.py

test:keras:
    extends: .test_template
    needs: ["build:keras"]
    script:
        - cd transformers/tests && pytest -o log_cli=true --log-cli-level=INFO -v test_keras_transformer.py

test:face_detection:
    extends: .test_template
    needs: ["build:face_detection"]
    script:
        - mkdir -p /root/.kaggle
        - echo ${KAGGLE_CREDS_JSON} > /root/.kaggle/kaggle.json
        - chmod 600 /root/.kaggle/kaggle.json
        - mkdir -p transformers/face_detection/model
        - dnf update -y && dnf install unzip -y
        - kaggle datasets download -d sambitmukherjee/caffe-face-detector-opencv-pretrained-model
        - unzip caffe-face-detector-opencv-pretrained-model.zip -d transformers/face_detection/model/
        - dnf install ffmpeg libSM libXext -y
        - cd transformers/tests && pytest -v test_face_detection.py

test:audio_split_consolidate:
    extends: .test_template
    needs: ["build:audio_split_consolidate"]
    script:
        - pip install --upgrade soundfile
        - cd transformers/tests
        - pytest -v --log-cli-level=INFO test_audio_split.py
        - pytest -v --log-cli-level=INFO test_audio_split_consolidate.py

test:ffmpeg:
    extends: .test_template
    needs: ["build:ffmpeg"]
    script:
        - pip install --upgrade soundfile
        - cd transformers/tests
        - pytest -v --log-cli-level=INFO test_ffmpeg.py -m "not stress"

test:batch_rename:
    extends: .test_template
    needs: ["build:batch_rename"]
    script:
        - cd transformers/tests
        - pytest -v --log-cli-level=INFO test_batch_rename.py

publish:echo:
    extends: .publish_template
    needs: ["test:echo"]
    script:
        - cd transformers
        - make -C echo all
        - make -C go_echo all

publish:hello_world:
    extends: .publish_template
    needs: ["test:hello_world"]
    script:
        - cd transformers
        - make -C hello_world all
        - make -C go_hello_world all

publish:md5:
    extends: .publish_template
    needs: ["test:md5"]
    script:
        - cd transformers
        - make -C md5 all

publish:hash_with_args:
    extends: .publish_template
    needs: ["test:hash_with_args"]
    script:
        - cd transformers
        - make -C hash_with_args all

publish:tar2tf:
    extends: .publish_template
    needs: ["test:tar2tf"]
    script:
        - cd transformers
        - make -C tar2tf all

publish:compress:
    extends: .publish_template
    needs: ["test:compress"]
    script:
        - cd transformers
        - make -C compress all

publish:torchvision:
    extends: .publish_template
    needs: ["test:torchvision"]
    script:
        - cd transformers
        - make -C torchvision_preprocess all

publish:keras:
    needs: ["test:keras"]
    extends: .publish_template
    script:
        - cd transformers
        - make -C keras_preprocess all

publish:face_detection:
    extends: .publish_template
    needs: ["test:face_detection"]
    script:
        - cd transformers/face_detection 
        - echo ${KAGGLE_CREDS_JSON} > kaggle_creds.json
        - make all

publish:audio_split_consolidate:
    extends: .publish_template
    needs: ["test:audio_split_consolidate"]
    script:
        - cd transformers/NeMo/audio_split_consolidate/
        - make -C audio_manager all
        - make -C audio_splitter all

publish:ffmpeg:
    extends: .publish_template
    needs: ["test:ffmpeg"]
    script:
        - cd transformers
        - make -C FFmpeg all
        - make -C go_FFmpeg all

publish:batch_rename:
    extends: .publish_template
    needs: ["test:batch_rename"]
    script:
        - cd transformers/batch_rename
        - make all

stress:echo:
    extends: .stress_template
    script:
        - cd transformers/tests
        - pytest -o log_cli=true --log-cli-level=INFO test_echo_stress.py

stress:hello-world:
    extends: .stress_template
    script:
        - cd transformers/tests
        - pytest -o log_cli=true --log-cli-level=INFO test_hello_world_stress.py

stress:md5:
    extends: .stress_template
    script:
        - cd transformers/tests
        - pytest -o log_cli=true --log-cli-level=INFO test_md5_stress.py

stress:ffmpeg:
    extends: .stress_template
    script:
        - cd transformers/tests
        - pip install --upgrade soundfile
        - pytest -v --log-cli-level=INFO test_ffmpeg.py -m "stress"

stress:all:
    extends: .stress_template
    script:
        - cd transformers/tests
        - pip install --upgrade soundfile
        - pytest -o log_cli=true --log-cli-level=INFO test_md5_stress.py test_echo_stress.py test_hello_world_stress.py
        - pytest -v --log-cli-level=INFO test_ffmpeg.py -m "stress"
